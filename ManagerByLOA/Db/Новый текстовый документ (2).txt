catch (DbException ex)
			{
				string probableCause; // вероятная причина
				var sqlException = ex as SqlException;
				if (sqlException != null)
				{
					var exceptionNumber = sqlException.Number;
					switch (exceptionNumber)
					{
						case errorNumberCauseServer:      // недоступен сервер
							probableCause = string.Format(errorCauseServer, server);
							break;
						case errorNumberCauseDatabase:    // недоступна база
							probableCause = string.Format(errorCauseDatabase, database);
							break;
						default:                          // неопределённая ошибка открытия соединения
							probableCause = string.Format(errorUncertain, database, server);
							break;
					}
				}
				else // неопределённая ошибка открытия соединения
				{
					probableCause = string.Format(errorUncertain, database, server);
				}
				throw new StorageException(ex.Message, probableCause, ex);
			}